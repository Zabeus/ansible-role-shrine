shrine {
  pmEndpoint {
    url = "{{ ['http://', i2b2_cell.Pmdata.ip, '/i2b2/services/PMService/getServices'] | join }}"
  }

  ontEndpoint {
    url = "{{ ['http://', i2b2_cell.Metadata.ip, '/i2b2/rest/OntologyService/'] | join }}"
  }
  
  hiveCredentials {
    domain = "{{ shrine_adapter_user.domain }}"
    username = "{{ shrine_adapter_user.name }}"
    password = "{{ shrine_adapter_user.pass }}"
    crcProjectId = "{{ shrine_adapter_user.project }}"
    ontProjectId = "{{ shrine_i2b2_project }}"
  }

  breakdownResultOutputTypes {
    PATIENT_AGE_COUNT_XML {
      description = "Age patient breakdown"
    }
      
    PATIENT_RACE_COUNT_XML {
      description = "Race patient breakdown"
    }

    PATIENT_VITALSTATUS_COUNT_XML {
      description = "Vital Status patient breakdown"
    }

    PATIENT_GENDER_COUNT_XML {
      description = "Gender patient breakdown"
    }
  }

  queryEntryPoint {
    create = true

    authenticationType = "pm"

    authorizationType = "{{ 'shrine-steward' if using_shrine_steward | bool else 'none' }}"  // can be none, shrine-steward, or hms-steward

    {% if shrine_hub_url is defined %}
    broadcasterServiceEndpoint {
      url = "{{ shrine_hub_url if shrine_hub_url is defined else '' }}"
    }
    {% endif %}
    {% if using_shrine_steward | bool %}
    //shrine-steward config
    shrineSteward {
      qepUserName = "{{ steward_qep_user[0].name if steward_qep_user is defined else '' }}"   // QEP's username in the PM
      qepPassword = "{{ steward_qep_user[0].pass if steward_qep_user is defined else '' }}"   // QEP's password
      stewardBaseUrl = "{{ ['https://', shrine_hostname, ':', shrine_ports.https] | join }}"  // Data steward app's base URL, minus trailing slash (https://hostname:port)
    }
    {% endif %}

    includeAggregateResults = false

    maxQueryWaitTime {
      minutes = 5
    }
    
    attachSigningCert = {{ 'true' if shrine_attach_signing_cert | bool else 'false'}}

    audit {
      database {
      {% if shrine_db_type == "oracle" %}
        slickProfileClassName = "freeslick.OracleProfile$"
      {% elif shrine_db_type == "sqlserver" %}
        slickProfileClassName = "freeslick.MSSQLServerProfile$"
      {% else %}
        slickProfileClassName = "slick.driver.MySQLDriver$"
      {% endif %}
      }
    }
  }

{% if is_shrine_hub | bool %}
  hub {
    create = true

    maxQueryWaitTime {
      minutes = {{ shrine_hub_timeout_mins }}
    }

    {% if shrine_nodes is defined %}
    downstreamNodes {
        {% for node in shrine_nodes %}
          "{{ node.name }}" = "{{ node.url }}"
        {% endfor %}
    }
    {% endif %}

    shouldQuerySelf = {{ 'true' if shrine_should_query_self | bool else 'false' }}
  }
{% endif %}

  adapter {
    create = {{ 'false' if (is_shrine_hub | bool) and (not shrine_should_query_self | bool) else 'true'}}

    crcEndpoint {
      url = "{{ ['http://', i2b2_cell.Crcdata.ip, '/i2b2/services/QueryToolService/'] | join }}"
    }

    setSizeObfuscation = true

    adapterLockoutAttemptsThreshold = {{ shrine_lockout_threshold }}

    adapterMappingsFileName = "{{ shrine_ont_mapping_file_local }}"
    
    maxSignatureAge {
      minutes = 5
    }
    
    immediatelyRunIncomingQueries = true

    audit {
      database {
      {% if shrine_db_type == "oracle" %}
        slickProfileClassName = "freeslick.OracleProfile$"
      {% elif shrine_db_type == "sqlserver" %}
        slickProfileClassName = "freeslick.MSSQLServerProfile$"
      {% else %}
        slickProfileClassName = "slick.driver.MySQLDriver$"
      {% endif %}
      }
    }
  }

  // SHRINE query term to test adapter functionality (backslashes must be escaped)
  networkStatusQuery = "{{ shrine_adapter_test_query }}"

  humanReadableNodeName = "{{ shrine_node_name }}"

  shrineDatabaseType = "mysql"

  keystore {
    file = "{{ shrine_keystore.file }}"
    password = "{{ shrine_keystore.pass }}"
    privateKeyAlias = "{{ shrine_keystore.alias }}"
    keyStoreType = "JKS"
    caCertAliases = ["{{ shrine_keystore.caCertAlias }}"] // if part of a network using the CA model, change this according to the network administrator's instructions
  }

}
